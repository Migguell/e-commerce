version: '3.8'

services:
  mysql:
    image: mysql:8.0
    container_name: ecommerce_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce_network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
      start_period: 40s

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: ecommerce_api
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_APP=app.py
      - FLASK_ENV=development
      - FLASK_DEBUG=True
      - DATABASE_URL=mysql+pymysql://${MYSQL_USER}:${MYSQL_PASSWORD}@mysql:3306/${MYSQL_DATABASE}
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
    volumes:
      - ./api:/app
      - /app/__pycache__
    networks:
      - ecommerce_network
    depends_on:
      mysql:
        condition: service_healthy
    command: >
      sh -c "python -c 'import time; time.sleep(10)' &&
             flask db upgrade &&
             python -c '
      from app import create_app;
      from models.order_status import OrderStatus;
      app = create_app();
      with app.app_context():
          OrderStatus.create_default_statuses()
      ' &&
             python app.py"

volumes:
  mysql_data:
    driver: local

networks:
  ecommerce_network:
    driver: bridge